@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using LevelUP.Data
@using LevelUP.Domain
@using System.Security.Claims

@inject UserManager<LevelUPUser> UserManager
@inject IUserStore<LevelUPUser> UserStore
@inject SignInManager<LevelUPUser> SignInManager
@inject IEmailSender<LevelUPUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager
@inject LevelUPContext DbContext
@inject ILogger<Index> Logger

<PageTitle>Register</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h1 class="login-title">Register</h1>
        <p class="login-subtitle">Start your journey with us</p>

        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" class="login-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-group">
                <InputText @bind-Value="Input.Email" class="form-control login-input" autocomplete="email" aria-required="true" placeholder="email" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="Input.Name" class="form-control login-input" autocomplete="name" aria-required="true" placeholder="username" />
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText type="password" @bind-Value="Input.Password" class="form-control login-input" autocomplete="new-password" aria-required="true" placeholder="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-group">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control login-input" autocomplete="new-password" aria-required="true" placeholder="confirm password" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="btn login-btn">Register</button>
        </EditForm>
        <div class="additional-links">
            <p>
                <a href="Account/Login">Already a member?</a>
            </p>
            <p>
                <a href="/">Return</a>
            </p>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #1f014a;
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        width: 100%;
        overflow-x: hidden;
    }

    .login-card {
        background: rgba(0, 0, 0, 0.25);
        padding: 40px;
        padding-bottom: 20px;
        border-radius: 12px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
        width: 100%;
        color: white;
        box-sizing: border-box;
    }

    .login-title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .login-subtitle {
        font-size: 1.2rem;
        margin-bottom: 30px;
    }

    .login-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .login-input {
        border: none;
        border-radius: 6px;
        padding: 10px;
        font-size: 1rem;
    }

        .login-input::placeholder {
            color: #b3b3b3;
        }

    .login-btn {
        background-color: #000;
        color: #fff;
        padding: 10px 20px;
        font-size: 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .login-btn:hover {
            background-color: #4c0266;
            color: #fff;
        }

    .additional-links p {
        margin-top: 20px;
        font-size: 0.9rem;
    }

    .additional-links a {
        color: #fff;
        text-decoration: none;
    }

        .additional-links a:hover {
            text-decoration: underline;
        }

    .form-label {
        display: flex;
        align-items: center;
        justify-content: flex-start;
    }

    .form-check-input {
        margin-right: 10px;
    }
</style>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private readonly LevelUPContext _dbContext; // Declare the instance variable

    private string? ErrorMessage { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {

        // Validate username length
        if (Input.Name.Length < 3)
        {
            identityErrors = new[] { new IdentityError { Description = "Username must have a minimum length of 3 characters." } };
            return;
        }

        // Check for duplicate email
        var existingUser = await UserManager.FindByEmailAsync(Input.Email);
        if (existingUser != null)
        {
            identityErrors = new[] { new IdentityError { Description = "A user with this email address already exists." } };
            return;
        }

        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        user.Name = Input.Name;
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        //create the user role if it doesn't exist
        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }
        //add the user to the user role
        await UserManager.AddToRoleAsync(user, "User");
        //add the user id as claim when user registers
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId", user.Id));

        Logger.LogInformation("User created a new account with password.");

        // Add the user to the Customer table
        try
        {
            var customer = new Customer
                {
                    UserName = Input.Name,
                    Email = Input.Email,
                    XPAmount = 0,
                    Rank = "D",
                    UserId = user.Id, // Link to AspNetUser
                    DateCreated = DateTime.Now,
                    DateUpdated = DateTime.Now,
                    CreatedBy = Input.Name,
                    UpdatedBy = Input.Email
                };

            DbContext.Customer.Add(customer);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError("Error creating customer record: {0}", ex.Message);
            identityErrors = new[] { new IdentityError { Description = "User registered but customer record could not be created." } };
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
            "Account/RegisterConfirmation",
            new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private LevelUPUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<LevelUPUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(LevelUPUser)}'. " +
                    $"Ensure that '{nameof(LevelUPUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<LevelUPUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<LevelUPUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "Username")]
        public string Name { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}