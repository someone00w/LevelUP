@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using LevelUP.Data

@inject SignInManager<LevelUPUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h1 class="login-title">Login</h1>
        <p class="login-subtitle">Get back in action</p>
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="login-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-group">
                <InputText @bind-Value="Input.Email" class="form-control login-input" autocomplete="username" aria-required="true" placeholder="email" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText type="password" @bind-Value="Input.Password" class="form-control login-input" autocomplete="current-password" aria-required="true" placeholder="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="checkbox mb-3">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                    Remember me
                </label>
            </div>
            <button type="submit" class="btn login-btn">Login</button>

            <!-- Display error messages -->
            <p class="text-danger">@errorMessage</p>
        </EditForm>

        <!-- Links for additional actions -->
        <div class="additional-links">
            <p>
                <a href="Account/Register">Not a member?</a>
            </p>
            <p>
                <a href="Account/ForgotPassword">Forgot your password?</a>
            </p>
            <p>
                <a href="/">Return</a>
            </p>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #1f014a;
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        width: 100%;
        overflow-x: hidden;
    }

    .login-card {
        background: rgba(0, 0, 0, 0.25);
        padding: 40px;
        padding-bottom: 20px;
        border-radius: 12px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
        width: 100%;
        color: white;
        box-sizing: border-box;
    }

    .login-title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .login-subtitle {
        font-size: 1.2rem;
        margin-bottom: 30px;
    }

    .login-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .login-input {
        border: none;
        border-radius: 6px;
        padding: 10px;
        font-size: 1rem;
    }

        .login-input::placeholder {
            color: #b3b3b3;
        }

    .login-btn {
        background-color: #000;
        color: #fff;
        padding: 10px 20px;
        font-size: 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .login-btn:hover {
            background-color: #4c0266;
            color: #fff;
        }

    .form-label {
        display: flex;
        align-items: center; /* Align the checkbox and label vertically */
        justify-content: flex-start; /* Align them to the left */
    }

    .form-check-input {
        margin-right: 10px; /* Space between checkbox and label */
    }

    .additional-links p {
        margin-top: 20px;
        font-size: 0.9rem;
    }

    .additional-links a {
        color: #fff;
        text-decoration: none;
    }

        .additional-links a:hover {
            text-decoration: underline;
        }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "Account/Manage");
        }
        else if (result.RequiresTwoFactor)
        {
            errorMessage = "Two-factor authentication is required.";
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            errorMessage = "Your account is locked due to multiple failed login attempts. Please try again later.";
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid email or password. Please try again.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
