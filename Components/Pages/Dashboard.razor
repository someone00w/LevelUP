@page "/dashboard"
@using Microsoft.EntityFrameworkCore
@using LevelUP.Domain
@rendermode InteractiveServer

@inject IDbContextFactory<LevelUP.Data.LevelUPContext> DbFactory
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Dashboard</PageTitle>

<div class="dashboard-container">
    <div class="main-sections">
        <div class="profile-section">
            <h1>Profile Status</h1>
            <p>View and edit your Profile Status</p>
            <p>Rank: @customer?.Rank</p>
            <p>XP: @customer?.XPAmount</p>
            <button class="btn" @onclick="NavigateToProfile">Edit Profile</button>
        </div>

        <div class="current-quest-section">
            <h1>Quest Tracker:</h1>
            <p>Accept and check through you quests!</p>
            <div class="quest-buttons">
                <button class="btn" @onclick="NavigateToUserQuests">Continue Quest</button>
                <button class="btn" @onclick="NavigateToQuests">View Quests</button>
            </div>
        </div>
    </div>

    <div class="features">
        <div class="feature">
            <h2>🎖️ Achievements</h2>
            <p>View your achievements and more that you can attain</p>
            <button class="btn" @onclick="NavigateToAchievements">Your Achievements</button>
        </div>

        <div class="feature">
            <h2>🏋️ Workout Tracker</h2>
            <p>Track your workout to help you finish your quests easier</p>
            <button class="btn" @onclick="NavigateToWorkouts">View Workouts</button>
        </div>
    </div>
</div>

@code {
    private Customer? customer;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.FindFirst("userId")?.Value;
        if (!string.IsNullOrEmpty(userIdClaim))
        {
            customer = await context.Customer.FirstOrDefaultAsync(c => c.UserId == userIdClaim);
        }
    }

    private void NavigateToProfile() => NavigationManager.NavigateTo("/Account/Manage");
    private void NavigateToQuests() => NavigationManager.NavigateTo("/quests");
    private void NavigateToUserQuests() => NavigationManager.NavigateTo("/userquests");
    private void NavigateToAchievements() => NavigationManager.NavigateTo("/userachievements");
    private void NavigateToWorkouts() => NavigationManager.NavigateTo("/workouts");
}
