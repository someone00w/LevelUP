@page "/achievements/details"
@using Microsoft.EntityFrameworkCore
@using LevelUP.Domain
@inject IDbContextFactory<LevelUP.Data.LevelUPContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Achievement</h2>
    <hr />
    @if (achievement is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">AchievementName</dt>
            <dd class="col-sm-10">@achievement.AchievementName</dd>
            <dt class="col-sm-2">AchievementDescription</dt>
            <dd class="col-sm-10">@achievement.AchievementDescription</dd>
            <dt class="col-sm-2">XPRequired</dt>
            <dd class="col-sm-10">@achievement.XPRequired</dd>
            <dt class="col-sm-2">QuestsRequired</dt>
            <dd class="col-sm-10">@achievement.QuestsRequired</dd>
            <dt class="col-sm-2">RankRequired</dt>
            <dd class="col-sm-10">@achievement.RankRequired</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@achievement.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@achievement.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@achievement.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@achievement.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/achievements/edit?achievementid={achievement.AchievementId}")">Edit</a> |
            <a href="@($"/achievements")">Back to List</a>
        </div>
    }
</div>

@code {
    private Achievement? achievement;

    [SupplyParameterFromQuery]
    private int AchievementId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        achievement = await context.Achievement.FirstOrDefaultAsync(m => m.AchievementId == AchievementId);

        if (achievement is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
