@page "/achievements/delete"
@using Microsoft.EntityFrameworkCore
@using LevelUP.Domain
@inject IDbContextFactory<LevelUP.Data.LevelUPContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Achievement</h2>
    <hr />
    @if (achievement is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">AchievementName</dt>
            <dd class="col-sm-10">@achievement.AchievementName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AchievementDescription</dt>
            <dd class="col-sm-10">@achievement.AchievementDescription</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">XPRequired</dt>
            <dd class="col-sm-10">@achievement.XPRequired</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">QuestsRequired</dt>
            <dd class="col-sm-10">@achievement.QuestsRequired</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RankRequired</dt>
            <dd class="col-sm-10">@achievement.RankRequired</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@achievement.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@achievement.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@achievement.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@achievement.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="achievement" OnValidSubmit="DeleteAchievement" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(achievement is null)">Delete</button> |
            <a href="/achievements">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Achievement? achievement;

    [SupplyParameterFromQuery]
    private int AchievementId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        achievement = await context.Achievement.FirstOrDefaultAsync(m => m.AchievementId == AchievementId);

        if (achievement is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAchievement()
    {
        using var context = DbFactory.CreateDbContext();
        context.Achievement.Remove(achievement!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/achievements");
    }
}
