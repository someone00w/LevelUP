@page "/workouts/details"
@using Microsoft.EntityFrameworkCore
@using LevelUP.Domain
@inject IDbContextFactory<LevelUP.Data.LevelUPContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Workout</h2>
    <hr />
    @if (workout is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">WorkoutName</dt>
            <dd class="col-sm-10">@workout.WorkoutName</dd>
            <dt class="col-sm-2">WorkoutDescription</dt>
            <dd class="col-sm-10">@workout.WorkoutDescription</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@workout.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@workout.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@workout.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@workout.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/workouts/edit?workoutid={workout.WorkoutId}")">Edit</a> |
            <a href="@($"/workouts")">Back to List</a>
        </div>
    }
</div>

<style>
    /* Push content down below the navigation bar */
    .container {
        margin-top: 50px; /* Adjust if necessary based on navbar height */
        padding: 20px;
    }

    /* Make all text white */
    body {
        color: white;
    }

    .table {
        color: white;
    }
</style>

@code {
    private Workout? workout;

    [SupplyParameterFromQuery]
    private int WorkoutId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        workout = await context.Workout.FirstOrDefaultAsync(m => m.WorkoutId == WorkoutId);

        if (workout is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
