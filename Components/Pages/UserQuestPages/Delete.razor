@page "/userquests/delete"
@using Microsoft.EntityFrameworkCore
@using LevelUP.Domain
@inject IDbContextFactory<LevelUP.Data.LevelUPContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>UserQuest</h2>
    <hr />
    @if (userquest is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">QuestName</dt>
            <dd class="col-sm-10">@userquest.QuestName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@userquest.Status</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CustomerId</dt>
            <dd class="col-sm-10">@userquest.CustomerId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">QuestId</dt>
            <dd class="col-sm-10">@userquest.QuestId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@userquest.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@userquest.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@userquest.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@userquest.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="userquest" OnValidSubmit="DeleteUserQuest" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(userquest is null)">Delete</button> |
            <a href="/userquests">Back to List</a>
        </EditForm>
    }
</div>

<style>
    /* Push content down below the navigation bar */
    .container {
        margin-top: 50px; /* Adjust if necessary based on navbar height */
        padding: 20px;
    }

    /* Make all text white */
    body {
        color: white;
    }

    .table {
        color: white;
    }
</style>

@code {
    private UserQuest? userquest;

    [SupplyParameterFromQuery]
    private int UserQuestId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        userquest = await context.UserQuest.FirstOrDefaultAsync(m => m.UserQuestId == UserQuestId);

        if (userquest is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteUserQuest()
    {
        using var context = DbFactory.CreateDbContext();
        context.UserQuest.Remove(userquest!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/userquests");
    }
}
