@page "/customers/edit"
@using Microsoft.EntityFrameworkCore
@using LevelUP.Domain
@inject IDbContextFactory<LevelUP.Data.LevelUPContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Customer</h2>
<hr />
@if (Customer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Customer" OnValidSubmit="UpdateCustomer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Customer.CustomerId" value="@Customer.CustomerId" />
                <div class="mb-3">
                    <label for="username" class="form-label">UserName:</label>
                    <InputText id="username" @bind-Value="Customer.UserName" class="form-control" />
                    <ValidationMessage For="() => Customer.UserName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Customer.Email" class="form-control" />
                    <ValidationMessage For="() => Customer.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="xpamount" class="form-label">XPAmount:</label>
                    <InputNumber id="xpamount" @bind-Value="Customer.XPAmount" class="form-control" />
                    <ValidationMessage For="() => Customer.XPAmount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rank" class="form-label">Rank:</label>
                    <InputText id="rank" @bind-Value="Customer.Rank" class="form-control" />
                    <ValidationMessage For="() => Customer.Rank" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputText id="userid" @bind-Value="Customer.UserId" class="form-control" />
                    <ValidationMessage For="() => Customer.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Customer.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Customer.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Customer.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Customer.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Customer.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Customer.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Customer.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Customer.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/customers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int CustomerId { get; set; }

    [SupplyParameterFromForm]
    private Customer? Customer { get; set; }

    //Create userId string to store the user id, default value is "System".
    private string userId = "System";

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
        userId = userIdClaim.Value;
        }

        using var context = DbFactory.CreateDbContext();
        Customer ??= await context.Customer.FirstOrDefaultAsync(m => m.CustomerId == CustomerId);

        if (Customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCustomer()
    {
        using var context = DbFactory.CreateDbContext();
        //Set the userId to the UpdatedBy fields.
        Customer.UpdatedBy = userId;
        //Set the DateUpdated fields to the current date and time.
        Customer.DateUpdated = DateTime.Now;
        context.Attach(Customer!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CustomerExists(Customer!.CustomerId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/customers");
    }

    private bool CustomerExists(int customerid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Customer.Any(e => e.CustomerId == customerid);
    }
}
