@page "/questworkouts/delete"
@using Microsoft.EntityFrameworkCore
@using LevelUP.Domain
@inject IDbContextFactory<LevelUP.Data.LevelUPContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>QuestWorkout</h2>
    <hr />
    @if (questworkout is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@questworkout.Status</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">QuestId</dt>
            <dd class="col-sm-10">@questworkout.QuestId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">WorkoutId</dt>
            <dd class="col-sm-10">@questworkout.WorkoutId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@questworkout.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@questworkout.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@questworkout.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@questworkout.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="questworkout" OnValidSubmit="DeleteQuestWorkout" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(questworkout is null)">Delete</button> |
            <a href="/questworkouts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private QuestWorkout? questworkout;

    [SupplyParameterFromQuery]
    private int QuestWorkoutId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        questworkout = await context.QuestWorkout.FirstOrDefaultAsync(m => m.QuestWorkoutId == QuestWorkoutId);

        if (questworkout is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteQuestWorkout()
    {
        using var context = DbFactory.CreateDbContext();
        context.QuestWorkout.Remove(questworkout!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/questworkouts");
    }
}
