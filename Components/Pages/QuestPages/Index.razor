@page "/quests"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Authorization
@using LevelUP.Domain
@using LevelUP.Data
@implements IAsyncDisposable
@inject IDbContextFactory<LevelUP.Data.LevelUPContext> DbFactory
@inject AuthenticationStateProvider authenticationStateProvider
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="quests/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Quest">
    <PropertyColumn Property="quest => quest.QuestName" />
    <PropertyColumn Property="quest => quest.Description" />
    <PropertyColumn Property="quest => quest.Category" />
    <PropertyColumn Property="quest => quest.XPReward" />
    <PropertyColumn Property="quest => quest.RankRequired" />
    <PropertyColumn Property="quest => quest.DateCreated" />
    <PropertyColumn Property="quest => quest.DateUpdated" />
    <PropertyColumn Property="quest => quest.CreatedBy" />
    <PropertyColumn Property="quest => quest.UpdatedBy" />

    <TemplateColumn Context="quest">
        <a href="@($"quests/edit?questid={quest.QuestId}")">Edit</a> |
        <a href="@($"quests/details?questid={quest.QuestId}")">Details</a> |
        <a href="@($"quests/delete?questid={quest.QuestId}")">Delete</a>
        <button class="btn" @onclick="() => AcceptQuest(quest.QuestId,quest.QuestName)">Accept</button>
    </TemplateColumn>
</QuickGrid>

@code {
    private LevelUPContext context = default!;
    private string userId = "System";

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }
    }

    private async Task<int> GetCurrentCustomerId()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not { IsAuthenticated: true })
            {
                Console.WriteLine("Error: User is not authenticated.");
                return 0;
            }

            var userIdClaim = user.FindFirst("userId")?.Value;

            if (string.IsNullOrEmpty(userIdClaim))
            {
                Console.WriteLine("Error: User ID claim is missing.");
                return 0;
            }

            Console.WriteLine($"User ID retrieved: {userIdClaim}");

            await using var context = await DbFactory.CreateDbContextAsync();

            // Ensure string comparison is properly done
            var customer = await context.Customer
                .Where(c => c.UserId == userIdClaim) // Now comparing strings correctly
                .Select(c => c.CustomerId)
                .FirstOrDefaultAsync();

            if (customer == 0)
            {
                Console.WriteLine("Error: Customer ID not found in database.");
            }

            return customer;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GetCurrentCustomerId: {ex.Message}");
            return 0;
        }
    }


    private async Task AcceptQuest(int questId, string questName)
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();

            int customerId = await GetCurrentCustomerId(); // FIXED: Use await

            if (customerId == 0)
            {
                Console.WriteLine("Error: Customer ID is invalid.");
                return;
            }

            Console.WriteLine($"Accepting quest: {questId} for customer: {customerId}");

            var userQuest = new UserQuest
                {
                    QuestName = questName,
                    Status = "Active",
                    CustomerId = customerId,
                    QuestId = questId,
                    CreatedBy = userId,
                    UpdatedBy = userId,
                    DateCreated = DateTime.Now,
                    DateUpdated = DateTime.Now
                };

            context.UserQuest.Add(userQuest);
            await context.SaveChangesAsync();

            Console.WriteLine("Quest accepted successfully.");
            NavigationManager.NavigateTo("/userquests");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in AcceptQuest: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
