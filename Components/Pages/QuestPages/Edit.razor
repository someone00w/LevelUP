@page "/quests/edit"
@using Microsoft.EntityFrameworkCore
@using LevelUP.Domain
@inject IDbContextFactory<LevelUP.Data.LevelUPContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Quest</h2>
<hr />
@if (Quest is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Quest" OnValidSubmit="UpdateQuest" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Quest.QuestId" value="@Quest.QuestId" />
                <div class="mb-3">
                    <label for="questname" class="form-label">QuestName:</label>
                    <InputText id="questname" @bind-Value="Quest.QuestName" class="form-control" />
                    <ValidationMessage For="() => Quest.QuestName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Quest.Description" class="form-control" />
                    <ValidationMessage For="() => Quest.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputText id="category" @bind-Value="Quest.Category" class="form-control" />
                    <ValidationMessage For="() => Quest.Category" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="xpreward" class="form-label">XPReward:</label>
                    <InputNumber id="xpreward" @bind-Value="Quest.XPReward" class="form-control" />
                    <ValidationMessage For="() => Quest.XPReward" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rankrequired" class="form-label">RankRequired:</label>
                    <InputText id="rankrequired" @bind-Value="Quest.RankRequired" class="form-control" />
                    <ValidationMessage For="() => Quest.RankRequired" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputText id="status" @bind-Value="Quest.Status" class="form-control" />
                    <ValidationMessage For="() => Quest.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Quest.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Quest.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Quest.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Quest.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Quest.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Quest.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Quest.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Quest.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/quests">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int QuestId { get; set; }

    [SupplyParameterFromForm]
    private Quest? Quest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Quest ??= await context.Quest.FirstOrDefaultAsync(m => m.QuestId == QuestId);

        if (Quest is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateQuest()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Quest!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!QuestExists(Quest!.QuestId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/quests");
    }

    private bool QuestExists(int questid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Quest.Any(e => e.QuestId == questid);
    }
}
