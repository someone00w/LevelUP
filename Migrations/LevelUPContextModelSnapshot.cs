// <auto-generated />
using System;
using LevelUP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LevelUP.Migrations
{
    [DbContext(typeof(LevelUPContext))]
    partial class LevelUPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LevelUP.Data.LevelUPUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fee9286-6f53-4e4a-9b50-34a60691339a",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "adminUser",
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP7h1T/vnfRRfBEvEpJM+DkgQYl2VTHKVKqi62TWj/jBKagcWikY9/vBFmG0F4BDjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9a1bbb0-fd80-43ef-aab1-7db2d7ec4126",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "f2c5e7a3-50fa-46d5-9bc7-1c3f09f8c6b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7ce9770-5321-4c79-bec2-f08e21f1dd81",
                            Email = "cust@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "custUser",
                            NormalizedEmail = "CUST@LOCALHOST.COM",
                            NormalizedUserName = "CUST@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIhkWYNHbmP2XmKyVgGXbak/v4gNd5ru0DJxB24KBivxgaliAFdhwZEvQwV3weyf0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0936c8ef-ff0c-482c-add7-b708deb40b88",
                            TwoFactorEnabled = false,
                            UserName = "cust@localhost.com"
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("AchievementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AchievementName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuestsRequired")
                        .HasColumnType("int");

                    b.Property<int?>("RankRequired")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("XPRequired")
                        .HasColumnType("int");

                    b.HasKey("AchievementId");

                    b.ToTable("Achievement");

                    b.HasData(
                        new
                        {
                            AchievementId = 1,
                            AchievementDescription = "You've started your journey as an E-Rank hunter.",
                            AchievementName = "E-Rank Hunter",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4067),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4067),
                            QuestsRequired = 0,
                            RankRequired = 1,
                            UpdatedBy = "System",
                            XPRequired = 0
                        },
                        new
                        {
                            AchievementId = 2,
                            AchievementDescription = "Complete your first quest.",
                            AchievementName = "First Blood",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4070),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4070),
                            QuestsRequired = 1,
                            RankRequired = 1,
                            UpdatedBy = "System",
                            XPRequired = 50
                        },
                        new
                        {
                            AchievementId = 3,
                            AchievementDescription = "Reach D-Rank by earning enough XP.",
                            AchievementName = "D-Rank Awakening",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4072),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4072),
                            QuestsRequired = 5,
                            RankRequired = 2,
                            UpdatedBy = "System",
                            XPRequired = 500
                        },
                        new
                        {
                            AchievementId = 4,
                            AchievementDescription = "Complete 10 quests and prove your worth.",
                            AchievementName = "Elite Fighter",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4074),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4075),
                            QuestsRequired = 10,
                            RankRequired = 3,
                            UpdatedBy = "System",
                            XPRequired = 1200
                        },
                        new
                        {
                            AchievementId = 5,
                            AchievementDescription = "Ascend to C-Rank with enough experience.",
                            AchievementName = "C-Rank Promotion",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4076),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4077),
                            QuestsRequired = 20,
                            RankRequired = 4,
                            UpdatedBy = "System",
                            XPRequired = 2500
                        },
                        new
                        {
                            AchievementId = 6,
                            AchievementDescription = "Demonstrate your growing power by finishing 30 quests.",
                            AchievementName = "Shadow Monarch's Apprentice",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4079),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4079),
                            QuestsRequired = 30,
                            RankRequired = 5,
                            UpdatedBy = "System",
                            XPRequired = 4000
                        },
                        new
                        {
                            AchievementId = 7,
                            AchievementDescription = "Enter the ranks of B-Rank hunters.",
                            AchievementName = "B-Rank Challenger",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4081),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4081),
                            QuestsRequired = 40,
                            RankRequired = 6,
                            UpdatedBy = "System",
                            XPRequired = 6000
                        },
                        new
                        {
                            AchievementId = 8,
                            AchievementDescription = "Become an elite hunter by reaching A-Rank.",
                            AchievementName = "A-Rank Conqueror",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4083),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4084),
                            QuestsRequired = 50,
                            RankRequired = 7,
                            UpdatedBy = "System",
                            XPRequired = 10000
                        },
                        new
                        {
                            AchievementId = 9,
                            AchievementDescription = "Achieve S-Rank status, the pinnacle of hunters.",
                            AchievementName = "S-Rank Dominator",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4085),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4086),
                            QuestsRequired = 75,
                            RankRequired = 8,
                            UpdatedBy = "System",
                            XPRequired = 20000
                        },
                        new
                        {
                            AchievementId = 10,
                            AchievementDescription = "Surpass all limits and claim the title of the Shadow Monarch.",
                            AchievementName = "Shadow Monarch",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4088),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(4088),
                            QuestsRequired = 100,
                            RankRequired = 9,
                            UpdatedBy = "System",
                            XPRequired = 50000
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XPAmount")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("LevelUP.Domain.Quest", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RankRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XPReward")
                        .HasColumnType("int");

                    b.HasKey("QuestId");

                    b.ToTable("Quest");

                    b.HasData(
                        new
                        {
                            QuestId = 1,
                            Category = "Training",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3827),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3827),
                            Description = "Basic training for new hunters to improve endurance and strength.",
                            QuestName = "D-Rank Warm-up",
                            RankRequired = "D",
                            UpdatedBy = "System",
                            XPReward = 100
                        },
                        new
                        {
                            QuestId = 2,
                            Category = "Endurance",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3829),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3830),
                            Description = "Increase agility and stamina to survive in low-level dungeons.",
                            QuestName = "Survival Instincts",
                            RankRequired = "D",
                            UpdatedBy = "System",
                            XPReward = 200
                        },
                        new
                        {
                            QuestId = 3,
                            Category = "Strength",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3832),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3832),
                            Description = "Enhance strength with rigorous training.",
                            QuestName = "D-Rank Power Boost",
                            RankRequired = "D",
                            UpdatedBy = "System",
                            XPReward = 500
                        },
                        new
                        {
                            QuestId = 4,
                            Category = "Agility",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3834),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3834),
                            Description = "Improve speed and reaction time for quick escapes.",
                            QuestName = "Dungeon Sprint",
                            RankRequired = "D",
                            UpdatedBy = "System",
                            XPReward = 700
                        },
                        new
                        {
                            QuestId = 5,
                            Category = "Full Body",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3835),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3836),
                            Description = "A challenging workout to prepare for higher-ranked missions.",
                            QuestName = "C-Rank Warrior's Test",
                            RankRequired = "C",
                            UpdatedBy = "System",
                            XPReward = 1200
                        },
                        new
                        {
                            QuestId = 6,
                            Category = "Combat",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3837),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3838),
                            Description = "Advanced combat training to prepare for elite-level battles.",
                            QuestName = "B-Rank Combat Mastery",
                            RankRequired = "B",
                            UpdatedBy = "System",
                            XPReward = 2500
                        },
                        new
                        {
                            QuestId = 7,
                            Category = "Exploration",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3840),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3840),
                            Description = "Navigate through dungeons to master terrain and encounter dangerous creatures.",
                            QuestName = "Dungeon Explorer",
                            RankRequired = "B",
                            UpdatedBy = "System",
                            XPReward = 3000
                        },
                        new
                        {
                            QuestId = 8,
                            Category = "Boss Fight",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3841),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3842),
                            Description = "Test your abilities against the strongest foes in the world.",
                            QuestName = "A-Rank Hero's Challenge",
                            RankRequired = "A",
                            UpdatedBy = "System",
                            XPReward = 5000
                        },
                        new
                        {
                            QuestId = 9,
                            Category = "Ultimate",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3843),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3844),
                            Description = "A trial to become the greatest warrior, battling ancient and powerful foes.",
                            QuestName = "S-Rank Immortal's Trial",
                            RankRequired = "S",
                            UpdatedBy = "System",
                            XPReward = 10000
                        },
                        new
                        {
                            QuestId = 10,
                            Category = "Race",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3845),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3846),
                            Description = "A timed race that tests the hunter’s agility, speed, and endurance.",
                            QuestName = "Speedster's Run",
                            RankRequired = "D",
                            UpdatedBy = "System",
                            XPReward = 600
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.QuestWorkout", b =>
                {
                    b.Property<int>("QuestWorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestWorkoutId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestId1")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("QuestWorkoutId");

                    b.HasIndex("QuestId");

                    b.HasIndex("QuestId1");

                    b.HasIndex("WorkoutId");

                    b.ToTable("QuestWorkout");

                    b.HasData(
                        new
                        {
                            QuestWorkoutId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3920),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3921),
                            QuestId = 1,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 1
                        },
                        new
                        {
                            QuestWorkoutId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3922),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3923),
                            QuestId = 1,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 2
                        },
                        new
                        {
                            QuestWorkoutId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3924),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3925),
                            QuestId = 1,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 6
                        },
                        new
                        {
                            QuestWorkoutId = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3926),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3926),
                            QuestId = 2,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 8
                        },
                        new
                        {
                            QuestWorkoutId = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3927),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3928),
                            QuestId = 2,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 7
                        },
                        new
                        {
                            QuestWorkoutId = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3929),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3929),
                            QuestId = 3,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 3
                        },
                        new
                        {
                            QuestWorkoutId = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3931),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3931),
                            QuestId = 3,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 9
                        },
                        new
                        {
                            QuestWorkoutId = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3932),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3933),
                            QuestId = 4,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 6
                        },
                        new
                        {
                            QuestWorkoutId = 9,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3960),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3961),
                            QuestId = 4,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 10
                        },
                        new
                        {
                            QuestWorkoutId = 10,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3962),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3963),
                            QuestId = 5,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 1
                        },
                        new
                        {
                            QuestWorkoutId = 11,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3964),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3964),
                            QuestId = 5,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 2
                        },
                        new
                        {
                            QuestWorkoutId = 12,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3966),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3966),
                            QuestId = 5,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 9
                        },
                        new
                        {
                            QuestWorkoutId = 13,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3967),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3968),
                            QuestId = 6,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 4
                        },
                        new
                        {
                            QuestWorkoutId = 14,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3969),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3969),
                            QuestId = 6,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 5
                        },
                        new
                        {
                            QuestWorkoutId = 15,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3971),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3971),
                            QuestId = 6,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 7
                        },
                        new
                        {
                            QuestWorkoutId = 16,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3972),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3973),
                            QuestId = 7,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 8
                        },
                        new
                        {
                            QuestWorkoutId = 17,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3974),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3974),
                            QuestId = 7,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 10
                        },
                        new
                        {
                            QuestWorkoutId = 18,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3976),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3976),
                            QuestId = 8,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 1
                        },
                        new
                        {
                            QuestWorkoutId = 19,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3977),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3978),
                            QuestId = 8,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 3
                        },
                        new
                        {
                            QuestWorkoutId = 20,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3979),
                            DateUpdated = new DateTime(2025, 2, 9, 14, 50, 21, 488, DateTimeKind.Utc).AddTicks(3979),
                            QuestId = 8,
                            Status = "Incomplete",
                            UpdatedBy = "System",
                            WorkoutId = 6
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 585, DateTimeKind.Local).AddTicks(7340),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 585, DateTimeKind.Local).AddTicks(7353),
                            Email = "admin@localhost.com",
                            UpdatedBy = "System",
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            UserName = "adminUser"
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.UserAchievement", b =>
                {
                    b.Property<int>("UserAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAchievementId"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUnlocked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserAchievementId");

                    b.HasIndex("AchievementId");

                    b.HasIndex("CustomerId");

                    b.ToTable("UserAchievement");
                });

            modelBuilder.Entity("LevelUP.Domain.UserQuest", b =>
                {
                    b.Property<int>("UserQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserQuestId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<string>("QuestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserQuestId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("QuestId");

                    b.ToTable("UserQuest");
                });

            modelBuilder.Entity("LevelUP.Domain.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkoutDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkoutName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkoutId");

                    b.ToTable("Workout");

                    b.HasData(
                        new
                        {
                            WorkoutId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3625),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3636),
                            UpdatedBy = "System",
                            WorkoutDescription = "A basic upper body exercise that strengthens the chest, shoulders, and triceps.",
                            WorkoutName = "Push-Ups"
                        },
                        new
                        {
                            WorkoutId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3638),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3639),
                            UpdatedBy = "System",
                            WorkoutDescription = "A lower body exercise that targets the quadriceps, hamstrings, and glutes.",
                            WorkoutName = "Squats"
                        },
                        new
                        {
                            WorkoutId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3641),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3641),
                            UpdatedBy = "System",
                            WorkoutDescription = "An upper body exercise that builds back and bicep strength.",
                            WorkoutName = "Pull-Ups"
                        },
                        new
                        {
                            WorkoutId = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3642),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3643),
                            UpdatedBy = "System",
                            WorkoutDescription = "A core exercise that strengthens the abdominal muscles and improves endurance.",
                            WorkoutName = "Plank"
                        },
                        new
                        {
                            WorkoutId = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3644),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3645),
                            UpdatedBy = "System",
                            WorkoutDescription = "A lower body exercise that improves balance and strengthens the legs.",
                            WorkoutName = "Lunges"
                        },
                        new
                        {
                            WorkoutId = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3646),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3646),
                            UpdatedBy = "System",
                            WorkoutDescription = "A cardiovascular exercise that enhances coordination and endurance.",
                            WorkoutName = "Jump Rope"
                        },
                        new
                        {
                            WorkoutId = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3647),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3648),
                            UpdatedBy = "System",
                            WorkoutDescription = "A full-body exercise that combines strength and cardio training.",
                            WorkoutName = "Burpees"
                        },
                        new
                        {
                            WorkoutId = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3649),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3650),
                            UpdatedBy = "System",
                            WorkoutDescription = "A cardio and core workout that improves agility and endurance.",
                            WorkoutName = "Mountain Climbers"
                        },
                        new
                        {
                            WorkoutId = 9,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3651),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3652),
                            UpdatedBy = "System",
                            WorkoutDescription = "A strength exercise that targets the lower back, glutes, and hamstrings.",
                            WorkoutName = "Deadlifts"
                        },
                        new
                        {
                            WorkoutId = 10,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3653),
                            DateUpdated = new DateTime(2025, 2, 9, 22, 50, 21, 488, DateTimeKind.Local).AddTicks(3653),
                            UpdatedBy = "System",
                            WorkoutDescription = "A core workout that strengthens the abdominal muscles and obliques.",
                            WorkoutName = "Bicycle Crunches"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "cd2bcf0c-20db-474f-8407-5a6b159518bc",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "f2c5e7a3-50fa-46d5-9bc7-1c3f09f8c6b2",
                            RoleId = "cd2bcf0c-20db-474f-8407-5a6b159518bc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LevelUP.Domain.Customer", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LevelUP.Domain.QuestWorkout", b =>
                {
                    b.HasOne("LevelUP.Domain.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LevelUP.Domain.Quest", null)
                        .WithMany("QuestWorkouts")
                        .HasForeignKey("QuestId1");

                    b.HasOne("LevelUP.Domain.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("LevelUP.Domain.Staff", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LevelUP.Domain.UserAchievement", b =>
                {
                    b.HasOne("LevelUP.Domain.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LevelUP.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LevelUP.Domain.UserQuest", b =>
                {
                    b.HasOne("LevelUP.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LevelUP.Domain.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LevelUP.Data.LevelUPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LevelUP.Domain.Quest", b =>
                {
                    b.Navigation("QuestWorkouts");
                });
#pragma warning restore 612, 618
        }
    }
}
