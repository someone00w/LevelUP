// <auto-generated />
using System;
using LevelUP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LevelUP.Migrations
{
    [DbContext(typeof(LevelUPContext))]
    [Migration("20250209090643_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LevelUP.Data.LevelUPUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdfb1c6a-b540-475a-ad93-e3e225503f8d",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "adminUser",
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEoKFqC50aqemhs9KNXeYH7ZkHG7InjZpXk8cuVIE9DNbivsGSAXkDjssaoNgplCyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "591a4869-df07-4beb-8b6f-add2487e6ee8",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "f2c5e7a3-50fa-46d5-9bc7-1c3f09f8c6b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cae30d03-10f5-4a1e-8099-dac4047efb05",
                            Email = "cust@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "custUser",
                            NormalizedEmail = "CUST@LOCALHOST.COM",
                            NormalizedUserName = "CUST@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEvMJMb2A3G0aqqNYjlZRy+TH+oZsDF0KYXc+pnS9loZ3Eo7ZHVj/4JS13cBq5c4bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f499d169-8540-4471-89b4-a9c8d30f9d27",
                            TwoFactorEnabled = false,
                            UserName = "cust@localhost.com"
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("AchievementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AchievementName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuestsRequired")
                        .HasColumnType("int");

                    b.Property<int?>("RankRequired")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("XPRequired")
                        .HasColumnType("int");

                    b.HasKey("AchievementId");

                    b.ToTable("Achievement");

                    b.HasData(
                        new
                        {
                            AchievementId = 1,
                            AchievementDescription = "You've started your journey as an E-Rank hunter.",
                            AchievementName = "E-Rank Hunter",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5589),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5589),
                            QuestsRequired = 0,
                            RankRequired = 1,
                            UpdatedBy = "System",
                            XPRequired = 0
                        },
                        new
                        {
                            AchievementId = 2,
                            AchievementDescription = "Complete your first quest.",
                            AchievementName = "First Blood",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5592),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5592),
                            QuestsRequired = 1,
                            RankRequired = 1,
                            UpdatedBy = "System",
                            XPRequired = 50
                        },
                        new
                        {
                            AchievementId = 3,
                            AchievementDescription = "Reach D-Rank by earning enough XP.",
                            AchievementName = "D-Rank Awakening",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5594),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5595),
                            QuestsRequired = 5,
                            RankRequired = 2,
                            UpdatedBy = "System",
                            XPRequired = 500
                        },
                        new
                        {
                            AchievementId = 4,
                            AchievementDescription = "Complete 10 quests and prove your worth.",
                            AchievementName = "Elite Fighter",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5597),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5597),
                            QuestsRequired = 10,
                            RankRequired = 3,
                            UpdatedBy = "System",
                            XPRequired = 1200
                        },
                        new
                        {
                            AchievementId = 5,
                            AchievementDescription = "Ascend to C-Rank with enough experience.",
                            AchievementName = "C-Rank Promotion",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5599),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5600),
                            QuestsRequired = 20,
                            RankRequired = 4,
                            UpdatedBy = "System",
                            XPRequired = 2500
                        },
                        new
                        {
                            AchievementId = 6,
                            AchievementDescription = "Demonstrate your growing power by finishing 30 quests.",
                            AchievementName = "Shadow Monarch's Apprentice",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5602),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5602),
                            QuestsRequired = 30,
                            RankRequired = 5,
                            UpdatedBy = "System",
                            XPRequired = 4000
                        },
                        new
                        {
                            AchievementId = 7,
                            AchievementDescription = "Enter the ranks of B-Rank hunters.",
                            AchievementName = "B-Rank Challenger",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5604),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5605),
                            QuestsRequired = 40,
                            RankRequired = 6,
                            UpdatedBy = "System",
                            XPRequired = 6000
                        },
                        new
                        {
                            AchievementId = 8,
                            AchievementDescription = "Become an elite hunter by reaching A-Rank.",
                            AchievementName = "A-Rank Conqueror",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5607),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5607),
                            QuestsRequired = 50,
                            RankRequired = 7,
                            UpdatedBy = "System",
                            XPRequired = 10000
                        },
                        new
                        {
                            AchievementId = 9,
                            AchievementDescription = "Achieve S-Rank status, the pinnacle of hunters.",
                            AchievementName = "S-Rank Dominator",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5609),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5609),
                            QuestsRequired = 75,
                            RankRequired = 8,
                            UpdatedBy = "System",
                            XPRequired = 20000
                        },
                        new
                        {
                            AchievementId = 10,
                            AchievementDescription = "Surpass all limits and claim the title of the Shadow Monarch.",
                            AchievementName = "Shadow Monarch",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5611),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5612),
                            QuestsRequired = 100,
                            RankRequired = 9,
                            UpdatedBy = "System",
                            XPRequired = 50000
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XPAmount")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("LevelUP.Domain.Quest", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RankRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XPReward")
                        .HasColumnType("int");

                    b.HasKey("QuestId");

                    b.ToTable("Quest");

                    b.HasData(
                        new
                        {
                            QuestId = 1,
                            Category = "Training",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5338),
                            DateUpdated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5339),
                            Description = "Basic training for new hunters to improve endurance and strength.",
                            QuestName = "D-Rank Warm-up",
                            RankRequired = "D",
                            UpdatedBy = "System",
                            XPReward = 100
                        },
                        new
                        {
                            QuestId = 2,
                            Category = "Endurance",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5341),
                            DateUpdated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5342),
                            Description = "Increase agility and stamina to survive in low-level dungeons.",
                            QuestName = "Survival Instincts",
                            RankRequired = "D",
                            UpdatedBy = "System",
                            XPReward = 200
                        },
                        new
                        {
                            QuestId = 3,
                            Category = "Strength",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5344),
                            DateUpdated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5344),
                            Description = "Enhance strength with rigorous training.",
                            QuestName = "D-Rank Power Boost",
                            RankRequired = "D",
                            UpdatedBy = "System",
                            XPReward = 500
                        },
                        new
                        {
                            QuestId = 4,
                            Category = "Agility",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5346),
                            DateUpdated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5346),
                            Description = "Improve speed and reaction time for quick escapes.",
                            QuestName = "Dungeon Sprint",
                            RankRequired = "D",
                            UpdatedBy = "System",
                            XPReward = 700
                        },
                        new
                        {
                            QuestId = 5,
                            Category = "Full Body",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5348),
                            DateUpdated = new DateTime(2025, 2, 9, 9, 6, 42, 393, DateTimeKind.Utc).AddTicks(5349),
                            Description = "A challenging workout to prepare for higher-ranked missions.",
                            QuestName = "C-Rank Warrior's Test",
                            RankRequired = "C",
                            UpdatedBy = "System",
                            XPReward = 1200
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.QuestWorkout", b =>
                {
                    b.Property<int>("QuestWorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestWorkoutId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestId1")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("QuestWorkoutId");

                    b.HasIndex("QuestId");

                    b.HasIndex("QuestId1");

                    b.HasIndex("WorkoutId");

                    b.ToTable("QuestWorkout");

                    b.HasData(
                        new
                        {
                            QuestWorkoutId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 1,
                            Status = "Incomplete",
                            WorkoutId = 1
                        },
                        new
                        {
                            QuestWorkoutId = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 1,
                            Status = "Incomplete",
                            WorkoutId = 2
                        },
                        new
                        {
                            QuestWorkoutId = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 1,
                            Status = "Incomplete",
                            WorkoutId = 6
                        },
                        new
                        {
                            QuestWorkoutId = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 2,
                            Status = "Incomplete",
                            WorkoutId = 8
                        },
                        new
                        {
                            QuestWorkoutId = 5,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 2,
                            Status = "Incomplete",
                            WorkoutId = 7
                        },
                        new
                        {
                            QuestWorkoutId = 6,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 3,
                            Status = "Incomplete",
                            WorkoutId = 3
                        },
                        new
                        {
                            QuestWorkoutId = 7,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 3,
                            Status = "Incomplete",
                            WorkoutId = 9
                        },
                        new
                        {
                            QuestWorkoutId = 8,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 4,
                            Status = "Incomplete",
                            WorkoutId = 6
                        },
                        new
                        {
                            QuestWorkoutId = 9,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 4,
                            Status = "Incomplete",
                            WorkoutId = 10
                        },
                        new
                        {
                            QuestWorkoutId = 10,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 5,
                            Status = "Incomplete",
                            WorkoutId = 1
                        },
                        new
                        {
                            QuestWorkoutId = 11,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 5,
                            Status = "Incomplete",
                            WorkoutId = 2
                        },
                        new
                        {
                            QuestWorkoutId = 12,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestId = 5,
                            Status = "Incomplete",
                            WorkoutId = 9
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 502, DateTimeKind.Local).AddTicks(1683),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 502, DateTimeKind.Local).AddTicks(1704),
                            Email = "admin@localhost.com",
                            UpdatedBy = "System",
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            UserName = "adminUser"
                        });
                });

            modelBuilder.Entity("LevelUP.Domain.UserAchievement", b =>
                {
                    b.Property<int>("UserAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAchievementId"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUnlocked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserAchievementId");

                    b.HasIndex("AchievementId");

                    b.HasIndex("CustomerId");

                    b.ToTable("UserAchievement");
                });

            modelBuilder.Entity("LevelUP.Domain.UserQuest", b =>
                {
                    b.Property<int>("UserQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserQuestId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<string>("QuestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserQuestId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("QuestId");

                    b.ToTable("UserQuest");
                });

            modelBuilder.Entity("LevelUP.Domain.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkoutDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkoutName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkoutId");

                    b.ToTable("Workout");

                    b.HasData(
                        new
                        {
                            WorkoutId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5068),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5081),
                            UpdatedBy = "System",
                            WorkoutDescription = "A basic upper body exercise that strengthens the chest, shoulders, and triceps.",
                            WorkoutName = "Push-Ups"
                        },
                        new
                        {
                            WorkoutId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5084),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5085),
                            UpdatedBy = "System",
                            WorkoutDescription = "A lower body exercise that targets the quadriceps, hamstrings, and glutes.",
                            WorkoutName = "Squats"
                        },
                        new
                        {
                            WorkoutId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5086),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5087),
                            UpdatedBy = "System",
                            WorkoutDescription = "An upper body exercise that builds back and bicep strength.",
                            WorkoutName = "Pull-Ups"
                        },
                        new
                        {
                            WorkoutId = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5088),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5089),
                            UpdatedBy = "System",
                            WorkoutDescription = "A core exercise that strengthens the abdominal muscles and improves endurance.",
                            WorkoutName = "Plank"
                        },
                        new
                        {
                            WorkoutId = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5090),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5091),
                            UpdatedBy = "System",
                            WorkoutDescription = "A lower body exercise that improves balance and strengthens the legs.",
                            WorkoutName = "Lunges"
                        },
                        new
                        {
                            WorkoutId = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5092),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5092),
                            UpdatedBy = "System",
                            WorkoutDescription = "A cardiovascular exercise that enhances coordination and endurance.",
                            WorkoutName = "Jump Rope"
                        },
                        new
                        {
                            WorkoutId = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5094),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5094),
                            UpdatedBy = "System",
                            WorkoutDescription = "A full-body exercise that combines strength and cardio training.",
                            WorkoutName = "Burpees"
                        },
                        new
                        {
                            WorkoutId = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5096),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5096),
                            UpdatedBy = "System",
                            WorkoutDescription = "A cardio and core workout that improves agility and endurance.",
                            WorkoutName = "Mountain Climbers"
                        },
                        new
                        {
                            WorkoutId = 9,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5097),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5098),
                            UpdatedBy = "System",
                            WorkoutDescription = "A strength exercise that targets the lower back, glutes, and hamstrings.",
                            WorkoutName = "Deadlifts"
                        },
                        new
                        {
                            WorkoutId = 10,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5099),
                            DateUpdated = new DateTime(2025, 2, 9, 17, 6, 42, 393, DateTimeKind.Local).AddTicks(5100),
                            UpdatedBy = "System",
                            WorkoutDescription = "A core workout that strengthens the abdominal muscles and obliques.",
                            WorkoutName = "Bicycle Crunches"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "cd2bcf0c-20db-474f-8407-5a6b159518bc",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "f2c5e7a3-50fa-46d5-9bc7-1c3f09f8c6b2",
                            RoleId = "cd2bcf0c-20db-474f-8407-5a6b159518bc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LevelUP.Domain.Customer", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LevelUP.Domain.QuestWorkout", b =>
                {
                    b.HasOne("LevelUP.Domain.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LevelUP.Domain.Quest", null)
                        .WithMany("QuestWorkouts")
                        .HasForeignKey("QuestId1");

                    b.HasOne("LevelUP.Domain.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("LevelUP.Domain.Staff", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LevelUP.Domain.UserAchievement", b =>
                {
                    b.HasOne("LevelUP.Domain.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LevelUP.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LevelUP.Domain.UserQuest", b =>
                {
                    b.HasOne("LevelUP.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LevelUP.Domain.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LevelUP.Data.LevelUPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LevelUP.Data.LevelUPUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LevelUP.Domain.Quest", b =>
                {
                    b.Navigation("QuestWorkouts");
                });
#pragma warning restore 612, 618
        }
    }
}
